pipeline{

    agent any
    stages {
        stage('checkout'){
            steps{
            
	            checkout scm: [
			   		$class: 'GitSCM',
			   		branches: [[name: '**']],
			   		doGenerateSubmoduleConfigurations: false,
			   		submoduleCfg: [],
			   		userRemoteConfigs: [
			   			[credentialsId: 'mbd06b@gmail.com priv key', name: 'github', url: 'git@github.com:Mbd06b/bright.git'],
			   			[credentialsId: 'mbd06b@gmail.com priv key', name: 'origin', url: 'git@gitlab.worscipe.com:Mbd06b/bright.git']
			   		]
		        ]
                
            }

        	
            
        }
        
         stage('sync'){  
           steps{
	           script{
	           
	           		// list all env variables available in pipeline for verbose output
				    echo ":::List all env globals:::"
				    echo sh(script: 'env|sort', returnStdout: true)
				    				    
				    echo ":::scm.getUserRemoteConfigs()[0].getUrl(); :::" 
				    echo scm.getUserRemoteConfigs()[0].getUrl();
				    
				    echo ":::scm.getUserRemoteConfigs();:::" 
				    echo scm.getUserRemoteConfigs().toString();
				    
				    echo "::: git remote -v :::" 
				    sh "git remote -v" 
	           	
		           	 sshagent(['mbd06b@gmail.com priv key']) {
				        sh('''
				            #!/usr/bin/env bash
				            set +x
				            # If no host key verification is needed, use the option `-oStrictHostKeyChecking=no`
				            export GIT_SSH_COMMAND="ssh -oStrictHostKeyChecking=no"
				            
				            #DEBUG          
				            git branch -d -r orgin/dependabot/maven/client-springmvc/BrightIdeas/jackson.version-2.10.1
				            git branch -d -r orgin/development
				            git branch -d -r orgin/feature-common-ioc
				            git branch -d -r orgin/master
				            git branch -d -r orgin/microservices_remove_angular_auth_artifacts
				            
				            echo "::: GIT DEBUG :::"
				  			echo "git remote -v"
				  			git remote -v
				  			
				  			echo "git branch -a"
				  			git branch -a
				  			
				  			echo "git status"
				  			git status
				  			echo "::: END GIT DEBUG :::" 
				  				            
				            echo "git fetch github development:development"
				            git fetch github development
				            
				            echo "git checkout development"
				            git checkout development
				            
				            echo "git pull"
				            git pull
				            
				            echo "git push origin development:development" 
				            git push origin development:development

				        ''')
			  		}
	           }
 
          }
       
	  }	
    }
     
	
    post{
	    success{
	        build job: 'Hello Multibranch/development', propagate: false, quietPeriod: 5, wait: false
	    }
    } 

}